# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SystemSelectCoordinate
                                 A QGIS plugin
 Selection of coordinate system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-28
        git sha              : $Format:%H$
        copyright            : (C) 2024 by User
        email                : andreyshka3@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import (QCoreApplication, Qt)
from PyQt5.QtWidgets import (QAction,
                             QDialog,
                             QListWidgetItem)

from qgis.core import (QgsProject,
                       QgsCoordinateReferenceSystem,
                       QgsMapLayer)

from .resources import *
from .system_select_coordinate_dialog_base \
    import Ui_SystemSelectCoordinateDialogBase


class Service:

    @staticmethod
    def get_project_layers():
        layers = QgsProject.instance().mapLayers().values()
        
        return layers

    @staticmethod
    def apply_crs_to_object(crs_id, obj):
        crs = QgsCoordinateReferenceSystem(crs_id)

        if not isinstance(obj, QgsMapLayer) and not isinstance(obj, QgsProject):
            raise TypeError("Unsupported object type")

        obj.setCrs(crs)

    @staticmethod
    def is_valid_choice(iface, obj):

        if not obj:
            (iface
             .messageBar()
             .pushMessage("Error", "No coordinate systems selected!", level=2))
            return False
        
        return True
    
    @staticmethod
    def info_success(iface):
        iface.messageBar().pushMessage("Success",
                                       "CRS set for selected layers!",
                                       level=0)
    
    @staticmethod
    def get_crs_to_list_widget(ui):
        crs_set = set()
        crs = QgsProject.instance().crs()

        if crs.isValid():
            crs_set.add(crs.authid())
        
        # crs_set.add('EPSG:3857') # TODO: для теста

        for crs_id in crs_set:
            crs = QgsCoordinateReferenceSystem(crs_id)
            item = QListWidgetItem(f"{crs_id} - {crs.description()}")
            item.setData(Qt.UserRole, crs_id)
            ui.listWidget.addItem(item)


class CoordinateDialogButtons(QDialog, Service):
    ui = Ui_SystemSelectCoordinateDialogBase()


    def __init__(self, iface):
        super().__init__(iface.mainWindow())
        self.iface = iface
        self.ui.setupUi(self)
        self.list_crs = self.get_crs_to_list_widget(self.ui)

        self.ui.setCrsForLayersButton.clicked.connect(self.set_crs_for_layers)
        self.ui.setCrsForProjectButton.clicked.connect(self.set_crs_for_project)

    def set_crs_for_layers(self):
        selected_items = self.ui.listWidget.selectedItems()

        if not self.is_valid_choice(self.iface, selected_items):
            return

        selected_layers = self.iface.layerTreeView().selectedLayers()

        for item in selected_items:
            crs_auth_id = item.data(Qt.UserRole)

            for layer in selected_layers:
                if layer is not None:
                    self.apply_crs_to_object(crs_auth_id, layer)

        self.info_success(self.iface)


    def set_crs_for_project(self):
        selected_items = self.ui.listWidget.selectedItems()

        if not self.is_valid_choice(self.iface, selected_items):
            return

        crs_id = selected_items[0].data(Qt.UserRole)
        all_layers = self.get_project_layers()

        for layer in all_layers:
            if layer is not None:
                self.apply_crs_to_object(crs_id, layer)

        self.info_success(self.iface)


class SystemSelectCoordinate:
    dialog = None
    action = None

    def __init__(self, iface):
        self.iface = iface

    def initGui(self):
        self.action = QAction(QCoreApplication.translate("CoordinateSelector", 
                                                         "Coordinate Selector"),
                              self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addPluginToMenu("&Coordinate Selector", self.action)

    def unload(self):
        self.iface.removePluginMenu("&Coordinate Selector", self.action)

    def run(self):
        self.dialog = CoordinateDialogButtons(self.iface)
        self.dialog.show()
